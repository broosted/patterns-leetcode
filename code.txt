defaultdict(list) Explanation
============================

defaultdict(list) is a specialized dictionary from Python's collections module that automatically creates a new empty list as the default value for any key that doesn't exist yet. This is particularly useful when you want to group items or build lists for each key without having to check if the key exists first.

Basic Example:
-------------
from collections import defaultdict

# Regular dict requires explicit list creation
regular_dict = {}
if 'key' not in regular_dict:
    regular_dict['key'] = []
regular_dict['key'].append(1)

# defaultdict(list) handles this automatically
dd = defaultdict(list)
dd['key'].append(1)  # No need to check if 'key' exists

Key Points:
----------
1. When you access a non-existent key, it automatically creates a new empty list
2. All other dictionary operations work the same as a regular dict
3. The default factory (list in this case) is called without arguments
4. It's particularly useful for:
   - Grouping items by a key
   - Building adjacency lists for graphs
   - Collecting values for each key
   - Creating inverted indices

Common Use Cases:
----------------
1. Grouping Items:
   dd = defaultdict(list)
   items = [('a', 1), ('b', 2), ('a', 3)]
   for key, value in items:
       dd[key].append(value)
   # Result: {'a': [1, 3], 'b': [2]}

2. Building Adjacency List:
   graph = defaultdict(list)
   edges = [(1, 2), (1, 3), (2, 4)]
   for u, v in edges:
       graph[u].append(v)
   # Result: {1: [2, 3], 2: [4]}

3. Collecting Values:
   dd = defaultdict(list)
   for i, char in enumerate("hello"):
       dd[char].append(i)
   # Result: {'h': [0], 'e': [1], 'l': [2, 3], 'o': [4]}

Advantage:
---------
The main advantage is that it eliminates the need for the common pattern:
if key not in d:
    d[key] = []
d[key].append(value)

Instead, you can simply write:
d[key].append(value)

This makes the code cleaner and more concise while maintaining the same functionality.

Time Complexity:
--------------
- Access/Insert: O(1) average case
- Same as regular dictionary operations
- No additional overhead for the default list creation

Space Complexity:
---------------
- O(n) where n is the number of key-value pairs
- Each key stores a list, which may grow based on the number of values

Common Applications:
------------------
1. Graph Representation:
   - Building adjacency lists
   - Storing edges for each vertex
   - Creating directed/undirected graphs

2. Data Grouping:
   - Grouping items by category
   - Creating frequency lists
   - Building inverted indices

3. Multi-value Dictionaries:
   - When a key can have multiple values
   - When you need to collect all values for each key
   - When building relationships between items

4. Text Processing:
   - Building word indices
   - Creating character position maps
   - Grouping similar items

Remember:
--------
- defaultdict(list) is just one type of defaultdict
- You can use other types as default factories (e.g., defaultdict(int), defaultdict(set))
- The default factory is called without arguments
- It's a subclass of dict, so all dict methods work
- The default value is only created when accessing a non-existent key